# This script controls actions to be taken when ad-hoc mode is started or stopped.
# ------------------------------------------------------------------------------------
# It uses the "edify" language, which is also used for the android OTA update scripts. 
# See:
# http://android.git.kernel.org/?p=platform/bootable/recovery.git;a=tree;f=edify;h=04720f8aaa9a5e0079b79f8be7f11b7f74414162;hb=HEAD
# ------------------------------------------------------------------------------------
# NOTE: Must do a project clean and rebuild then completely uninstall app. from device
# and reinstall it for changes made in this file to take effect.

# Actions for starting ad-hoc mode
action() == "start" && (
  
  # Set "status" property
  setprop("adhoc.status","running");
  
  # Remove all iptables rules
  run_program("/data/data/org.span/bin/iptables -t filter -F");
  run_program("/data/data/org.span/bin/iptables -t nat -F");
  
  # Enable forwarding
  log(run_program("echo 1 > /proc/sys/net/ipv4/ip_forward"), "Enabling kernel packet forwarding");
  run_program("/data/data/org.span/bin/iptables -A FORWARD -j ACCEPT");

  # Wifi mode, do some wifi things...
  getcfg("adhoc.mode") == "wifi" && (

    # Set "status"-Property
    setprop("adhoc.mode","wifi");
  
  
  	# Generic device (e.g. Nexus S 4G)
    (getcfg("device.type") == "generic") && (

      log(load_wifi(), "Loading WiFi driver");
      
      log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " " + getcfg("ip.address") + " netmask " + getcfg("ip.netmask")) &&
                  run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " up"),  "Activating WiFi interface");
                  
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " mode ad-hoc"), "Setting ad-hoc mode");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " essid " + getcfg("wifi.essid")), "Setting essid");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " channel " + getcfg("wifi.channel")), "Setting channel");
      
      getcfg("wifi.txpower") != "auto" && (
            log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " txpower " + getcfg("wifi.txpower")), "Setting transmit power");        
      );      
      
      run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " commit");
    );
    
    
    # Samsung Galaxy Tab (Original)
    getcfg("device.type") == "galaxytaborig" && (
     
      # Load driver via load_wifi(), later unload driver via rmmod("dhd")
      log(load_wifi(), "Loading WiFi driver");

      log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " " + getcfg("ip.address") + " netmask " + getcfg("ip.netmask")) &&
                  run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " up"),  "Activating WiFi interface");
                  
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " mode ad-hoc"), "Setting ad-hoc mode");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " essid " + getcfg("wifi.essid")), "Setting essid");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " channel " + getcfg("wifi.channel")), "Setting channel");
      
      getcfg("wifi.txpower") != "auto" && (
            log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " txpower " + getcfg("wifi.txpower")), "Setting transmit power");        
      );      
      
      run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " commit");
    );
    
    
    # ASUS Nexus 7
    getcfg("device.type") == "nexus7" && (
     
      # Load driver via load_wifi(), later unload driver via rmmod("dhd")
      log(load_wifi(), "Loading WiFi driver");

      log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " " + getcfg("ip.address") + " netmask " + getcfg("ip.netmask")) &&
                  run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " up"),  "Activating WiFi interface");
                  
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " mode ad-hoc"), "Setting ad-hoc mode");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " essid " + getcfg("wifi.essid")), "Setting essid");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " channel " + getcfg("wifi.channel")), "Setting channel");
      
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " power all"), "Setting power management");
      
      getcfg("wifi.txpower") != "auto" && (
            log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " txpower " + getcfg("wifi.txpower")), "Setting transmit power");        
      );
    );
    
    
# Samsung Galaxy S II 4G Epic Touch
getcfg("device.type") == "galaxys2epictouch" && (
 
  module_loaded("dhd") && rmmod("dhd");
  
  log(insmod("/lib/modules/dhd.ko", "dhd_pkt_filter_enable=0 firmware_path=/system/etc/wifi/bcm4330_sta.bin nvram_path=/system/etc/wifi/nvram_net.txt dhd_watchdog_ms=200 dhd_poll=1"), "Loading dhd.ko module");

  log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " " + getcfg("ip.address") + " netmask " + getcfg("ip.netmask")) &&
              run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " up"),  "Activating WiFi interface");
                    
  log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " mode ad-hoc"), "Setting ad-hoc mode");
  
  log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " essid " + getcfg("wifi.essid")), "Setting essid");
  
  log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " channel " + getcfg("wifi.channel")), "Setting channel");
  
  getcfg("wifi.txpower") != "auto" && (
        log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " txpower " + getcfg("wifi.txpower")), "Setting transmit power");        
  );      
  
  run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " commit");
);
    
    
    # Samsung Galaxy Tab 10.1, Samsung Galaxy Nexus, ASUS Transformer Prime, Samsung Galaxy S II 4G Epic Touch, Motorola Droid Razr?
    # getcfg("device.type") == "galaxys2epictouch" ||
    (getcfg("device.type") == "galaxytab10.1" || 
      getcfg("device.type") == "galaxynexus" || 
      getcfg("device.type") == "transformerprime" ||
      getcfg("device.type") == "galaxys3sghi747" ||
      getcfg("device.type") == "galaxys3gti9300" ||
      getcfg("device.type") == "galaxynote2gtn7100" ||
      getcfg("device.type") == "droidrazr") && (
      
      # MANET service will disable wifi through the framework before executing this script; the wpa_supplicant process will be terminated
      
      # load wifi driver; not the same as turning on wifi through Settings menu
      # unloading and then loading wifi restarts the wpa_supplicant process
      log(load_wifi(), "Loading WiFi driver");
      
      log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " down"), "Deactivating WiFi interface");
            
      # iwconfig process will bring interface back up (oh, Heisenbug)
      # setting parameters through the iwconfig process will revert to wpa_supplicant settings if wpa_supplicant process is active 
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " mode ad-hoc"), "Setting ad-hoc mode");
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " essid " + getcfg("wifi.essid")), "Setting essid");

      log(run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " " + getcfg("ip.address") + " netmask " + getcfg("ip.netmask")) &&
        run_program("/data/data/org.span/bin/ifconfig " + getcfg("wifi.interface") + " up"),  "Activating WiFi interface");
                        
      log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " channel " + getcfg("wifi.channel")), "Setting channel");
      
      getcfg("wifi.txpower") != "auto" && (
            log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " txpower " + getcfg("wifi.txpower")), "Setting transmit power");        
      );      
    );
    

	# Gateway
	getcfg("gateway.interface") != "none" && (
	  
	  # log(run_program("/data/data/org.span/bin/iptables -A FORWARD ! --dst " + getcfg("ip.address") + " -i " + getcfg("wifi.interface") + " -o " + getcfg("gateway.interface") + " -j ACCEPT") &&
	  
	  log(run_program("/data/data/org.span/bin/iptables -A FORWARD -i " + getcfg("wifi.interface") + " -o " + getcfg("gateway.interface") + " -j ACCEPT") &&
	    run_program("/data/data/org.span/bin/iptables -A FORWARD -i " + getcfg("gateway.interface") + " -o " + getcfg("wifi.interface") + " -j ACCEPT"),
	    "Setting gateway forwarding");
	  
	  log(run_program("/data/data/org.span/bin/iptables -t nat -A POSTROUTING -o " + getcfg("gateway.interface") + " -j MASQUERADE"), "Enabling NAT");
	);
    

    #
    # WEP-Encryption
    #
    getcfg("wifi.encryption.algorithm") == "wep" && (
      getcfg("wifi.encryption.setup") == "iwconfig" && (          
        log(run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " key s:" + getcfg("wifi.encryption.password") + "") &&
          run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " key restricted"), "Activating encryption (iwconfig)");
        run_program("/data/data/org.span/bin/iwconfig " + getcfg("wifi.interface") + " commit");
      );
      getcfg("wifi.encryption.setup") == "wpa_supplicant" && (        
        sleep("2");
        log(run_program("cd /data/local/tmp; mkdir /data/local/tmp/wpa_supplicant; wpa_supplicant -B -D" +
          getcfg("wifi.driver") + " -i" + getcfg("wifi.interface") +
          " -c/data/data/org.span/conf/wpa_supplicant.conf"), "Activating encryption (wpa_supplicant)");
      );
    );

  );

#  getcfg("adhoc.mode") == "bt" && (
#    #
#    # Set "mode"-Property
#    #
#    setprop("adhoc.mode","bt");
#    sleep("3");
#    #
#    # Bluetooth - start pand
#    #
#    run_program("/data/data/org.span/bin/pand --listen --role NAP " +
#                "--devup /data/data/org.span/bin/blue-up.sh " +
#                "--devdown /data/data/org.span/bin/blue-down.sh " +
#                "--pidfile /data/data/org.span/var/pand.pid");
#  );

#  #
#  # Remove old rules
#  #
#  run_program("/data/data/org.span/bin/iptables -N wireless-tether");
#  run_program("/data/data/org.span/bin/iptables -F wireless-tether");  
#  run_program("/data/data/org.span/bin/iptables -t nat -F PREROUTING");
#  run_program("/data/data/org.span/bin/iptables -t nat -F POSTROUTING");
#  run_program("/data/data/org.span/bin/iptables -t nat -F");

#  #
#  # Bring up NAT rules
#  #
#  log(
#    run_program("/data/data/org.span/bin/iptables -A wireless-tether -m state --state ESTABLISHED,RELATED -j ACCEPT") &&
#    run_program("/data/data/org.span/bin/iptables -A wireless-tether -s " + getcfg("ip.network") + "/24 -j ACCEPT") &&
#    run_program("/data/data/org.span/bin/iptables -A wireless-tether -p 47 -j ACCEPT") &&
##    run_program("/data/data/org.span/bin/iptables -A wireless-tether -j DROP"),
#    run_program("/data/data/org.span/bin/iptables -A wireless-tether -j DROP") &&
#    run_program("/data/data/org.span/bin/iptables -A FORWARD -m state --state INVALID -j DROP") &&
#    run_program("/data/data/org.span/bin/iptables -A FORWARD -j wireless-tether") &&
#    run_program("/data/data/org.span/bin/iptables -t nat -I POSTROUTING -s " +
#               getcfg("ip.network") + "/24 -j MASQUERADE"),
#    "Enabling NAT rules");

#  #
#  # IP forwarding
#  #
#  log(file_write("/proc/sys/net/ipv4/ip_forward", "1"), "Enabling IP forwarding");

#  #
#  # dnsmasq for wifi tether (bluetooth has pand start it)
#  #
#  getcfg("adhoc.mode") == "wifi" &&
#      run_program("/data/data/org.span/bin/dnsmasq -i " + getcfg("wifi.interface") +" "+
#                  "--resolv-file=/data/data/org.span/conf/resolv.conf " +
#                  "--conf-file=/data/data/org.span/conf/dnsmasq.conf");

  log("Ad-hoc mode now running");
);


# Actions when stopping ad-hoc mode
action() == "stop" && (

  # Set "status" property
  setprop("adhoc.status","stopped");
  
  # Remove all iptables rules
  run_program("/data/data/org.span/bin/iptables -t filter -F");
  run_program("/data/data/org.span/bin/iptables -t nat -F");

#  #
#  # Disable forwarding and remove NAT rules.
#  #
#  log(file_write("/proc/sys/net/ipv4/ip_forward", "0"), "Disabling forwarding");
#  
#  log(
#    run_program("/data/data/org.span/bin/iptables -D FORWARD -j wireless-tether") &&
#    run_program("/data/data/org.span/bin/iptables -D FORWARD -m state --state INVALID -j DROP") &&
#    run_program("/data/data/org.span/bin/iptables -F wireless-tether") &&  
#    run_program("/data/data/org.span/bin/iptables -X wireless-tether") && 
#    run_program("/data/data/org.span/bin/iptables -t nat -F PREROUTING") &&
#    run_program("/data/data/org.span/bin/iptables -t nat -F POSTROUTING") &&
#    run_program("/data/data/org.span/bin/iptables -t nat -F"),
#  "Disabling NAT rules");

#  #
#  # Bluetooth, kill pand and and dnsmasq processes
#  #
#  getcfg("adhoc.mode") == "bt" && (
#    run_program("/data/data/org.span/bin/pand -K");
#    sleep("1");
#    kill_process("pand");
#    file_unlink("/data/data/org.span/var/pand.pid");
#    kill_process("dnsmasq");
#    kill_pidfile("/data/data/org.span/var/fixroute.pid");
#    file_unlink("/data/data/org.span/var/fixroute.pid");
#  );
  
  # Wifi mode, bring interface down, kill dnsmasq/wpa_supplicant, remove module
  getcfg("adhoc.mode") == "wifi" && (
    run_program("/data/data/org.span/bin/ifconfig " +  getcfg("wifi.interface") + " down"); 
#    kill_process("wpa_supplicant");
#    kill_process("dnsmasq");
    
#	 # place wifi back under framework control
#	 unload_wifi() && load_wifi();

#    module_loaded("bcm4329") && rmmod("bcm4329");
#    module_loaded("bcm4325") && rmmod("bcm4325");
#    module_loaded("wlan") && rmmod("wlan");
#    module_loaded("tiwlan_drv") && rmmod("tiwlan_drv");
#    module_loaded("tiap_drv") && rmmod("tiap_drv");
#    module_loaded("sdio") && rmmod("sdio");
    module_loaded("dhd") && rmmod("dhd");
#    module_loaded("wireless") && rmmod("wireless");
#    module_loaded("ar6000") && rmmod("ar6000");
  );
  
  log("Ad-hoc mode now stopped");
);
